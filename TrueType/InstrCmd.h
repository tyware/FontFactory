#pragma once

namespace FF_Font_Factory
{

    namespace FF_Font_Factory_TrueType
    {
        class CInstrCommand;
        class CGState;

        typedef int  (*IntProc)(CGState *pState);

        typedef enum
        {
            TT_SVTCA0      = 0x00,
            TT_SVTCA1      = 0x01,
            TT_SPVTCA0     = 0x02,
            TT_SPVTCA1     = 0x03,
            TT_SFVTCA0     = 0x04,
            TT_SFVTCA1     = 0x05,
            TT_SPVTL0      = 0x06,
            TT_SPVTL1      = 0x07,
            TT_SFVTL0      = 0x08,
            TT_SFVTL1      = 0x09,
            TT_SPVFS       = 0x0A,
            TT_SFVFS       = 0x0B,
            TT_GPV         = 0x0C,
            TT_GFV         = 0x0D,
            TT_SFVTPV      = 0x0E,
            TT_ISECT       = 0x0F,
            TT_SRP0        = 0x10,
            TT_SRP1        = 0x11,
            TT_SRP2        = 0x12,
            TT_SZP0        = 0x13,
            TT_SZP1        = 0x14,
            TT_SZP2        = 0x15,
            TT_SZPS        = 0x16,
            TT_SLOOP       = 0x17,
            TT_RTG         = 0x18,
            TT_RTHG        = 0x19,
            TT_SMD         = 0x1A,
            TT_ELSE        = 0x1B,
            TT_JMPR        = 0x1C,
            TT_SCVTCI      = 0x1D,
            TT_SSWCI       = 0x1E,
            TT_SSW         = 0x1F,
            TT_DUP         = 0x20,
            TT_POP         = 0x21,
            TT_CLEAR       = 0x22,
            TT_SWAP        = 0x23,
            TT_DEPTH       = 0x24,
            TT_CINDEX      = 0x25,
            TT_MINDEX      = 0x26,
            TT_ALIGNPTS    = 0x27,
            TT_UTP         = 0x29,
            TT_LOOPCALL    = 0x2A,
            TT_CALL        = 0x2B,
            TT_FDEF        = 0x2C,
            TT_ENDF        = 0x2D,
            TT_MDAP0       = 0x2E,
            TT_MDAP1       = 0x2F,
            TT_IUP0        = 0x30,
            TT_IUP1        = 0x31,
            TT_SHP0        = 0x32,
            TT_SHP1        = 0x33,
            TT_SHC0        = 0x34,
            TT_SHC1        = 0x35,
            TT_SHZ0        = 0x36,
            TT_SHZ1        = 0x37,
            TT_SHPIX       = 0x38,
            TT_IP          = 0x39,
            TT_MSIRP0      = 0x3A,
            TT_MSIRP1      = 0x3B,
            TT_ALIGNRP     = 0x3C,
            TT_RTDG        = 0x3D,
            TT_MIAP0       = 0x3E,
            TT_MIAP1       = 0x3F,
            TT_NPUSHB      = 0x40,
            TT_NPUSHW      = 0x41,
            TT_WS          = 0x42,
            TT_RS          = 0x43,
            TT_WCVTP       = 0x44,
            TT_RCVT        = 0x45,
            TT_GC0         = 0x46,
            TT_GC1         = 0x47,
            TT_SCFS        = 0x48,
            TT_MD0         = 0x49,
            TT_MD1         = 0x4A,
            TT_MPPEM       = 0x4B,
            TT_MPS         = 0x4C,
            TT_FLIPON      = 0x4D,
            TT_FLIPOFF     = 0x4E,
            TT_DEBUG       = 0x4F,
            TT_LT          = 0x50,
            TT_LTEQ        = 0x51,
            TT_GT          = 0x52,
            TT_GTEQ        = 0x53,
            TT_EQ          = 0x54,
            TT_NEQ         = 0x55,
            TT_ODD         = 0x56,
            TT_EVEN        = 0x57,
            TT_IF          = 0x58,
            TT_EIF         = 0x59,
            TT_AND         = 0x5A,
            TT_OR          = 0x5B,
            TT_NOT         = 0x5C,
            TT_DELTAP1     = 0x5D,
            TT_SDB         = 0x5E,
            TT_SDS         = 0x5F,
            TT_ADD         = 0x60,
            TT_SUB         = 0x61,
            TT_DIV         = 0x62,
            TT_MUL         = 0x63,
            TT_ABS         = 0x64,
            TT_NEG         = 0x65,
            TT_FLOOR       = 0x66,
            TT_CEILING     = 0x67,
            TT_ROUND0      = 0x68,
            TT_ROUND1      = 0x69,
            TT_ROUND2      = 0x6A,
            TT_ROUND3      = 0x6B,
            TT_NROUND0     = 0x6C,
            TT_NROUND1     = 0x6D,
            TT_NROUND2     = 0x6E,
            TT_NROUND3     = 0x6F,
            TT_WCVTF       = 0x70,
            TT_DELTAP2     = 0x71,
            TT_DELTAP3     = 0x72,
            TT_DELTAC1     = 0x73,
            TT_DELTAC2     = 0x74,
            TT_DELTAC3     = 0x75,
            TT_SROUND      = 0x76,
            TT_S45ROUND    = 0x77,
            TT_JROT        = 0x78,
            TT_JROF        = 0x79,
            TT_ROFF        = 0x7A,
            TT_RUTG        = 0x7C,
            TT_RDTG        = 0x7D,
            TT_SANGW       = 0x7E,
            TT_AA          = 0x7F,
            TT_FLIPPT      = 0x80,
            TT_FLIPRGON    = 0x81,
            TT_FLIPRGOFF   = 0x82,
            TT_SCANCTRL    = 0x85,
            TT_SDPVTL0     = 0x86,
            TT_SDPVTL1     = 0x87,
            TT_GETINFO     = 0x88,
            TT_IDEF        = 0x89,
            TT_ROLL        = 0x8A,
            TT_MAX         = 0x8B,
            TT_MIN         = 0x8C,
            TT_SCANTYPE    = 0x8D,
            TT_INSTCTRL    = 0x8E,
            TT_PUSHB1      = 0xB0,
            TT_PUSHB2      = 0xB1,
            TT_PUSHB3      = 0xB2,
            TT_PUSHB4      = 0xB3,
            TT_PUSHB5      = 0xB4,
            TT_PUSHB6      = 0xB5,
            TT_PUSHB7      = 0xB6,
            TT_PUSHB8      = 0xB7,
            TT_PUSHW1      = 0xB8,
            TT_PUSHW2      = 0xB9,
            TT_PUSHW3      = 0xBA,
            TT_PUSHW4      = 0xBB,
            TT_PUSHW5      = 0xBC,
            TT_PUSHW6      = 0xBD,
            TT_PUSHW7      = 0xBE,
            TT_PUSHW8      = 0xBF,
            TT_MDRP00      = 0xC0,
            TT_MDRP01      = 0xC1,
            TT_MDRP02      = 0xC2,
            TT_MDRP03      = 0xC3,
            TT_MDRP04      = 0xC4,
            TT_MDRP05      = 0xC5,
            TT_MDRP06      = 0xC6,
            TT_MDRP07      = 0xC7,
            TT_MDRP08      = 0xC8,
            TT_MDRP09      = 0xC9,
            TT_MDRP0A      = 0xCA,
            TT_MDRP0B      = 0xCB,
            TT_MDRP0C      = 0xCC,
            TT_MDRP0D      = 0xCD,
            TT_MDRP0E      = 0xCE,
            TT_MDRP0F      = 0xCF,
            TT_MDRP10      = 0xD0,
            TT_MDRP11      = 0xD1,
            TT_MDRP12      = 0xD2,
            TT_MDRP13      = 0xD3,
            TT_MDRP14      = 0xD4,
            TT_MDRP15      = 0xD5,
            TT_MDRP16      = 0xD6,
            TT_MDRP17      = 0xD7,
            TT_MDRP18      = 0xD8,
            TT_MDRP19      = 0xD9,
            TT_MDRP1A      = 0xDA,
            TT_MDRP1B      = 0xDB,
            TT_MDRP1C      = 0xDC,
            TT_MDRP1D      = 0xDD,
            TT_MDRP1E      = 0xDE,
            TT_MDRP1F      = 0xDF,
            TT_MIRP0       = 0xE0,
            TT_MIRP1       = 0xE1,
            TT_MIRP2       = 0xE2,
            TT_MIRP3       = 0xE3,
            TT_MIRP4       = 0xE4,
            TT_MIRP5       = 0xE5,
            TT_MIRP6       = 0xE6,
            TT_MIRP7       = 0xE7,
            TT_MIRP8       = 0xE8,
            TT_MIRP9       = 0xE9,
            TT_MIRPA       = 0xEA,
            TT_MIRPB       = 0xEB,
            TT_MIRPC       = 0xEC,
            TT_MIRPD       = 0xED,
            TT_MIRPE       = 0xEE,
            TT_MIRPF       = 0xEF,
            TT_MIRP10      = 0xF0,
            TT_MIRP11      = 0xF1,
            TT_MIRP12      = 0xF2,
            TT_MIRP13      = 0xF3,
            TT_MIRP14      = 0xF4,
            TT_MIRP15      = 0xF5,
            TT_MIRP16      = 0xF6,
            TT_MIRP17      = 0xF7,
            TT_MIRP18      = 0xF8,
            TT_MIRP19      = 0xF9,
            TT_MIRP1A      = 0xFA,
            TT_MIRP1B      = 0xFB,
            TT_MIRP1C      = 0xFC,
            TT_MIRP1D      = 0xFD,
            TT_MIRP1E      = 0xFE,
            TT_MIRP1F      = 0xFF,
        }TT_INSTR_CMD;

        class CInstrCommand
        {
        public:
            CInstrCommand();
            ~CInstrCommand();

        public:
            //char      OpNames[256]; /*  Operator names  */
            //std::wstring *OpNames[256];
            IntProc  OpProcs[256+256]; /*  Operator procedures  */

        public: // commands
        };


    };

};

